{"version":3,"sources":["actions.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;;;;;;;IAOM,O;;AAEF;;;;;;;;AAQA,uBAAwB;AAAA;;AAAA,0CAAT,OAAS;AAAT,mBAAS;AAAA;;AACpB,YAAI,QAAQ,QAAQ,KAAR,CAAc,CAAd,CAAZ;AACA,aAAK,iBAAL,CAAuB,KAAvB;AACA,aAAK,cAAL,CAAoB,KAApB;AACA,aAAK,IAAL,GAAY,YAAM;AACd,mBAAO,MAAM,KAAN,CAAY,CAAZ,CAAP;AACH,SAFD;AAGH;;AAED;;;;;;;;;;;;0CAQkB,K,EAAO;AACrB,gBAAI,aAAa,IAAjB;AACA,gBAAI,MAAM,CAAN,iCAAJ,EAAoC;AAChC,6BAAa,MAAM,KAAN,EAAb;AACH,aAFD,MAEO;AACH,6BAAa,0BAAb;AACH;AACD;;;;AAIA,mBAAO,cAAP,CAAsB,IAAtB,EAA4B,YAA5B,EAA0C;AACtC,mBADsC,iBAChC;AACF,2BAAO,UAAP;AACH;AAHqC,aAA1C;AAKH;;AAED;;;;;;;;uCAKe,K,EAAO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,wBACT,IADS;;AAEd,0BAAK,IAAL,IAAa;AAAA;;AAAA,2DAAI,IAAJ;AAAI,gCAAJ;AAAA;;AAAA,+BAAa,qBAAK,UAAL,EAAgB,IAAhB,qBAAqB,IAArB,SAA8B,IAA9B,EAAb;AAAA,qBAAb;AAFc;;AAClB,qCAAiB,KAAjB,8HAAwB;AAAA;AAEvB;AAHiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIrB;;;;;;AAEJ;;AAED;kBACe,O","file":"actions.js","sourcesContent":["import Dispatcher from './dispatcher';\r\n\r\n/**\r\n * Actions are keep organized as different objects here,\r\n * for easy keeping appart to wich one is.\r\n * Each action is when called, dedicated to pass the action information into \r\n * the dispatcher, and then, the dispatcher just sends them to all stores \r\n * listening to this actions.\r\n */\r\nclass Actions {\r\n\r\n    /**\r\n     * Creates a new action set, using the names provided.\r\n     * \r\n     * When no Dispatcher is provided, the action set creates one for itself.\r\n     * \r\n     * @param { Dispatcher } [dispatcher] (optional) The dispatcher this action set uses \r\n     * @param { string[] } ...actions The actions names the names for the actions to be created.\r\n     */\r\n    constructor(...actions) {\r\n        let names = actions.slice(0);\r\n        this._createDispatcher(names);\r\n        this._createHandles(names);\r\n        this.list = () => {\r\n            return names.slice(0);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a dispatcher for this action set or\r\n     * uses the one provided in the parameters.\r\n     * @param { Dispatcher } [dispatcher] (optional) The dispatcher this action set uses \r\n     * @param { string[] } ...names The actions names the names for the actions to be created.\r\n     * @private\r\n     * \r\n     */\r\n    _createDispatcher(names) {\r\n        let dispatcher = null;\r\n        if (names[0] instanceof Dispatcher) {\r\n            dispatcher = names.shift();\r\n        } else {\r\n            dispatcher = new Dispatcher();\r\n        }     \r\n        /**\r\n         * Gets the current dispatcher assigned\r\n         * @get dispatcher \r\n         */\r\n        Object.defineProperty(this, 'dispatcher', {\r\n            get() {\r\n                return dispatcher;\r\n            }\r\n        });           \r\n    }\r\n\r\n    /**\r\n     * Creates a list of handles based on action names.\r\n     * @param { string[] } ...names The names of the actions.\r\n     * @private  \r\n     */\r\n    _createHandles(names) {\r\n        for (let name of names) {\r\n            this[name] = (...args) => this.dispatcher.fire(name, ...args);\r\n        }     \r\n    }\r\n\r\n};\r\n\r\n/* Exported value */\r\nexport default Actions;"],"sourceRoot":"/source/"}