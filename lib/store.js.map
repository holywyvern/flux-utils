{"version":3,"sources":["store.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA;;;;;;IAMM,K;;AAEF;;;;AAIA,yBAAmD;AAAA,YAArC,OAAqC,QAArC,OAAqC;AAAA,gCAA5B,OAA4B;AAAA,YAA5B,OAA4B,gCAAlB,EAAkB;AAAA,8BAAd,KAAc;AAAA,YAAd,KAAc,8BAAN,EAAM;;AAAA;;AAC/C,YAAI,QAAQ,KAAK,iBAAL,CAAuB,KAAvB,CAAZ;AACA,aAAK,cAAL,CAAoB,OAApB,EAA6B,OAA7B,EAAsC,KAAtC;AACH;;AAED;;;;;;;;;;0CAMkB,K,EAAO;AACrB,gBAAI,aAAa,wBAAK,KAAL,CAAjB;AACA,gBAAI,SAAa,6BAAjB;AACA,mBAAO,gBAAP,CAAwB,IAAxB,EAA8B;AAC1B;;;AAGA,wBAAQ;AACJ,uBADI,iBACE;AACF,+BAAO,MAAP;AACH;AAHG,iBAJkB;AAS1B;;;AAGA,uBAAQ;AACJ,uBADI,iBACE;AACF,+BAAO,wBAAK,UAAL,CAAP;AACH;AAHG;AAZkB,aAA9B;;AAmBA,mBAAO;AACH;;;AAGA,oBAAI,MAAJ,GAAa;AACT,2BAAO,MAAP;AACH,iBANE;AAOH;;;;AAIA,oBAAI,KAAJ,GAAY;AACR,2BAAO,wBAAK,UAAL,CAAP;AACH,iBAbE;AAcH;;;;;;AAMA,oBAAI,KAAJ,CAAU,KAAV,EAAiB;AACb,iCAAa,wBAAK,KAAL,CAAb;AACA,2BAAO,IAAP,CAAY,QAAZ;AACH,iBAvBE;AAwBH;;;;AAIA,wBA5BG,sBA4BQ;AACP,2BAAO,KAAK,KAAZ;AACH,iBA9BE;;AA+BH;;;;AAIA,wBAnCG,oBAmCM,KAnCN,EAmCa;AACZ,yBAAK,KAAL,GAAa,KAAb;AACH;AArCE,aAAP;AAuCH;;AAED;;;;;;;;;;uCAOe,O,EAAS,O,EAAS,K,EAAO;AAAA;AAAA;AAAA;;AAAA;AACpC,qCAAmB,QAAQ,IAAR,EAAnB,8HAAmC;AAAA,wBAA1B,MAA0B;;AAC/B,wBAAI,WAAW,QAAQ,MAAR,EAAgB,IAAhB,CAAqB,KAArB,CAAf;AACA,4BAAQ,UAAR,CAAmB,EAAnB,CAAsB,MAAtB,EAA8B,QAA9B;AACH;AAJmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKvC;;AAED;;;;;;;;;mCAMW;AACP,mBAAO,KAAK,KAAZ;AACH;;;;;;kBAIU,K","file":"store.js","sourcesContent":["import copy         from 'deep-copy';\r\nimport EventManager from 'generic-events';\r\n\r\n/**\r\n * An Store is a class than keeps an state.\r\n * Also it responds to actions to change its state.\r\n * After the state is changed, an Store emit the changes to all of \r\n * the components subscribed to listen.\r\n */\r\nclass Store {\r\n\r\n    /**\r\n     * Creates a new store based on a set of actions\r\n     * @param {Actions} actions A set of actions\r\n     */\r\n    constructor({ actions, methods = {}, state = {} }) {\r\n        let proxy = this._defineProperties(state);\r\n        this._defineActions(actions, methods, proxy);\r\n    }\r\n\r\n    /**\r\n     * Defines the properties of the store\r\n     * @param { object } state The state reference of the store.\r\n     * @returns A proxy object, wich handles the real state management.\r\n     * @private\r\n     */\r\n    _defineProperties(state) {\r\n        let storeState = copy(state);\r\n        let events     = new EventManager();\r\n        Object.defineProperties(this, {\r\n            /**\r\n             * The event dispatcher of the Store\r\n             */\r\n            events: { \r\n                get() { \r\n                    return events; \r\n                } \r\n            },\r\n            /**\r\n             * The state of the Store.\r\n             */\r\n            state:  { \r\n                get() { \r\n                    return copy(storeState); \r\n                }\r\n            }\r\n        });\r\n\r\n        return {\r\n            /**\r\n             * Get the event dispatcher of the store\r\n             */\r\n            get events() {\r\n                return events; \r\n            },\r\n            /**\r\n             * Gets the current state of the store.\r\n             * @note it makes a deep copy to avoid modification from outside of this object.\r\n             */\r\n            get state() {\r\n                return copy(storeState); \r\n            },\r\n            /**\r\n             * Sets the state of the store and emit changes based on it.\r\n             * @param { object } value The new state.\r\n             * @note The event 'change' is always fired\r\n             * @note The value is deep copied to avoid modifications from outside of this object.\r\n             */\r\n            set state(value) {\r\n                storeState = copy(value);\r\n                events.fire('change');\r\n            },\r\n            /**\r\n             * Alias to state\r\n             * @get\r\n             */\r\n            getState() {\r\n                return this.state;\r\n            },\r\n            /**\r\n             * Alias to state=\r\n             * @set\r\n             */\r\n            setState(value) {\r\n                this.state = value;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Define actions based on the Action set.\r\n     * @param { Actions} actions the actions of this store.\r\n     * @param { object } methods a collection of methods for the store.\r\n     * @param { object } proxy The proxy object generated before.\r\n     * @private\r\n     */\r\n    _defineActions(actions, methods, proxy) {\r\n        for (let action of actions.list()) {\r\n            let callback = methods[action].bind(proxy);\r\n            actions.dispatcher.on(action, callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current state of this store.\r\n     * Equivalent to Store.prototype.state.\r\n     * @returns A copy of the current state.\r\n     * @see Store.prototype.state\r\n     */\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}\r\n\r\nexport default Store;"],"sourceRoot":"/source/"}